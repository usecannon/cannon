"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Package {
  id: ID!
  last_publisher: String!
  last_updated: BigInt!
  name: String!
  tags(first: Int = 100, orderBy: Tag_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Tag_filter): [Tag!]!
  variants(first: Int = 100, orderBy: Variant_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Variant_filter): [Variant!]!
}

input Package_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Package_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  last_publisher: String
  last_publisher_contains: String
  last_publisher_contains_nocase: String
  last_publisher_ends_with: String
  last_publisher_ends_with_nocase: String
  last_publisher_gt: String
  last_publisher_gte: String
  last_publisher_in: [String!]
  last_publisher_lt: String
  last_publisher_lte: String
  last_publisher_not: String
  last_publisher_not_contains: String
  last_publisher_not_contains_nocase: String
  last_publisher_not_ends_with: String
  last_publisher_not_ends_with_nocase: String
  last_publisher_not_in: [String!]
  last_publisher_not_starts_with: String
  last_publisher_not_starts_with_nocase: String
  last_publisher_starts_with: String
  last_publisher_starts_with_nocase: String
  last_updated: BigInt
  last_updated_gt: BigInt
  last_updated_gte: BigInt
  last_updated_in: [BigInt!]
  last_updated_lt: BigInt
  last_updated_lte: BigInt
  last_updated_not: BigInt
  last_updated_not_in: [BigInt!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Package_filter]
  tags_: Tag_filter
  variants_: Variant_filter
}

enum Package_orderBy {
  id
  last_publisher
  last_updated
  name
  tags
  variants
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  package(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Package
  packages(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Package_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Package_filter
  ): [Package!]!
  tag(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tag
  tags(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Tag_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Tag_filter
  ): [Tag!]!
  variant(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Variant
  variants(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Variant_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Variant_filter
  ): [Variant!]!
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  package(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Package
  packages(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Package_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Package_filter
  ): [Package!]!
  tag(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Tag
  tags(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Tag_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Tag_filter
  ): [Tag!]!
  variant(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Variant
  variants(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Variant_orderBy
    orderDirection: OrderDirection
    skip: Int = 0

    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Variant_filter
  ): [Variant!]!
}

type Tag {
  cannon_package: Package!
  id: ID!
  last_publisher: String!
  last_updated: BigInt!
  name: String!
  variants(first: Int = 100, orderBy: Variant_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Variant_filter): [Variant!]!
}

input Tag_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Tag_filter]
  cannon_package: String
  cannon_package_: Package_filter
  cannon_package_contains: String
  cannon_package_contains_nocase: String
  cannon_package_ends_with: String
  cannon_package_ends_with_nocase: String
  cannon_package_gt: String
  cannon_package_gte: String
  cannon_package_in: [String!]
  cannon_package_lt: String
  cannon_package_lte: String
  cannon_package_not: String
  cannon_package_not_contains: String
  cannon_package_not_contains_nocase: String
  cannon_package_not_ends_with: String
  cannon_package_not_ends_with_nocase: String
  cannon_package_not_in: [String!]
  cannon_package_not_starts_with: String
  cannon_package_not_starts_with_nocase: String
  cannon_package_starts_with: String
  cannon_package_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  last_publisher: String
  last_publisher_contains: String
  last_publisher_contains_nocase: String
  last_publisher_ends_with: String
  last_publisher_ends_with_nocase: String
  last_publisher_gt: String
  last_publisher_gte: String
  last_publisher_in: [String!]
  last_publisher_lt: String
  last_publisher_lte: String
  last_publisher_not: String
  last_publisher_not_contains: String
  last_publisher_not_contains_nocase: String
  last_publisher_not_ends_with: String
  last_publisher_not_ends_with_nocase: String
  last_publisher_not_in: [String!]
  last_publisher_not_starts_with: String
  last_publisher_not_starts_with_nocase: String
  last_publisher_starts_with: String
  last_publisher_starts_with_nocase: String
  last_updated: BigInt
  last_updated_gt: BigInt
  last_updated_gte: BigInt
  last_updated_in: [BigInt!]
  last_updated_lt: BigInt
  last_updated_lte: BigInt
  last_updated_not: BigInt
  last_updated_not_in: [BigInt!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Tag_filter]
  variants_: Variant_filter
}

enum Tag_orderBy {
  cannon_package
  cannon_package__id
  cannon_package__last_publisher
  cannon_package__last_updated
  cannon_package__name
  id
  last_publisher
  last_updated
  name
  variants
}

type Variant {
  cannon_package: Package!
  chain_id: Int!
  deploy_url: String!
  id: ID!
  last_publisher: String!
  last_updated: BigInt!
  meta_url: String!
  name: String!
  preset: String!
  tag: Tag!
}

input Variant_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Variant_filter]
  cannon_package: String
  cannon_package_: Package_filter
  cannon_package_contains: String
  cannon_package_contains_nocase: String
  cannon_package_ends_with: String
  cannon_package_ends_with_nocase: String
  cannon_package_gt: String
  cannon_package_gte: String
  cannon_package_in: [String!]
  cannon_package_lt: String
  cannon_package_lte: String
  cannon_package_not: String
  cannon_package_not_contains: String
  cannon_package_not_contains_nocase: String
  cannon_package_not_ends_with: String
  cannon_package_not_ends_with_nocase: String
  cannon_package_not_in: [String!]
  cannon_package_not_starts_with: String
  cannon_package_not_starts_with_nocase: String
  cannon_package_starts_with: String
  cannon_package_starts_with_nocase: String
  chain_id: Int
  chain_id_gt: Int
  chain_id_gte: Int
  chain_id_in: [Int!]
  chain_id_lt: Int
  chain_id_lte: Int
  chain_id_not: Int
  chain_id_not_in: [Int!]
  deploy_url: String
  deploy_url_contains: String
  deploy_url_contains_nocase: String
  deploy_url_ends_with: String
  deploy_url_ends_with_nocase: String
  deploy_url_gt: String
  deploy_url_gte: String
  deploy_url_in: [String!]
  deploy_url_lt: String
  deploy_url_lte: String
  deploy_url_not: String
  deploy_url_not_contains: String
  deploy_url_not_contains_nocase: String
  deploy_url_not_ends_with: String
  deploy_url_not_ends_with_nocase: String
  deploy_url_not_in: [String!]
  deploy_url_not_starts_with: String
  deploy_url_not_starts_with_nocase: String
  deploy_url_starts_with: String
  deploy_url_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  last_publisher: String
  last_publisher_contains: String
  last_publisher_contains_nocase: String
  last_publisher_ends_with: String
  last_publisher_ends_with_nocase: String
  last_publisher_gt: String
  last_publisher_gte: String
  last_publisher_in: [String!]
  last_publisher_lt: String
  last_publisher_lte: String
  last_publisher_not: String
  last_publisher_not_contains: String
  last_publisher_not_contains_nocase: String
  last_publisher_not_ends_with: String
  last_publisher_not_ends_with_nocase: String
  last_publisher_not_in: [String!]
  last_publisher_not_starts_with: String
  last_publisher_not_starts_with_nocase: String
  last_publisher_starts_with: String
  last_publisher_starts_with_nocase: String
  last_updated: BigInt
  last_updated_gt: BigInt
  last_updated_gte: BigInt
  last_updated_in: [BigInt!]
  last_updated_lt: BigInt
  last_updated_lte: BigInt
  last_updated_not: BigInt
  last_updated_not_in: [BigInt!]
  meta_url: String
  meta_url_contains: String
  meta_url_contains_nocase: String
  meta_url_ends_with: String
  meta_url_ends_with_nocase: String
  meta_url_gt: String
  meta_url_gte: String
  meta_url_in: [String!]
  meta_url_lt: String
  meta_url_lte: String
  meta_url_not: String
  meta_url_not_contains: String
  meta_url_not_contains_nocase: String
  meta_url_not_ends_with: String
  meta_url_not_ends_with_nocase: String
  meta_url_not_in: [String!]
  meta_url_not_starts_with: String
  meta_url_not_starts_with_nocase: String
  meta_url_starts_with: String
  meta_url_starts_with_nocase: String
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Variant_filter]
  preset: String
  preset_contains: String
  preset_contains_nocase: String
  preset_ends_with: String
  preset_ends_with_nocase: String
  preset_gt: String
  preset_gte: String
  preset_in: [String!]
  preset_lt: String
  preset_lte: String
  preset_not: String
  preset_not_contains: String
  preset_not_contains_nocase: String
  preset_not_ends_with: String
  preset_not_ends_with_nocase: String
  preset_not_in: [String!]
  preset_not_starts_with: String
  preset_not_starts_with_nocase: String
  preset_starts_with: String
  preset_starts_with_nocase: String
  tag: String
  tag_: Tag_filter
  tag_contains: String
  tag_contains_nocase: String
  tag_ends_with: String
  tag_ends_with_nocase: String
  tag_gt: String
  tag_gte: String
  tag_in: [String!]
  tag_lt: String
  tag_lte: String
  tag_not: String
  tag_not_contains: String
  tag_not_contains_nocase: String
  tag_not_ends_with: String
  tag_not_ends_with_nocase: String
  tag_not_in: [String!]
  tag_not_starts_with: String
  tag_not_starts_with_nocase: String
  tag_starts_with: String
  tag_starts_with_nocase: String
}

enum Variant_orderBy {
  cannon_package
  cannon_package__id
  cannon_package__last_publisher
  cannon_package__last_updated
  cannon_package__name
  chain_id
  deploy_url
  id
  last_publisher
  last_updated
  meta_url
  name
  preset
  tag
  tag__id
  tag__last_publisher
  tag__last_updated
  tag__name
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes

  """The block number"""
  number: Int!

  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!

  """The deployment ID"""
  deployment: String!

  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow

  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}
