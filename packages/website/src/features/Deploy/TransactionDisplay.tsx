import {
  Box,
  Flex,
  Modal,
  ModalBody,
  ModalCloseButton,
  ModalContent,
  ModalOverlay,
  Text,
  Link,
  useDisclosure,
  AlertDescription,
  AlertTitle,
  Alert as ChakraAlert,
} from '@chakra-ui/react';
import { Diff, parseDiff } from 'react-diff-view';
import {
  useCannonPackageContracts,
  useLoadCannonDefinition,
} from '@/hooks/cannon';
import { useGitDiff } from '@/hooks/git';
import { useGetPreviousGitInfoQuery } from '@/hooks/safe';
import { SafeDefinition } from '@/helpers/store';
import { SafeTransaction } from '@/types/SafeTransaction';
import { parseHintedMulticall } from '@/helpers/cannon';
import { Alert } from '@/components/Alert';
import { DisplayedTransaction } from './DisplayedTransaction';
import { CustomSpinner } from '@/components/CustomSpinner';
import { GitHub } from 'react-feather';

export function TransactionDisplay(props: {
  safeTxn: SafeTransaction;
  safe: SafeDefinition;
  allowPublishing?: boolean;
}) {
  const { isOpen, onOpen, onClose } = useDisclosure();
  const hintData = parseHintedMulticall(props.safeTxn?.data);

  const cannonInfo = useCannonPackageContracts(
    hintData?.cannonPackage
      ? '@' + hintData.cannonPackage.replace('://', ':')
      : ''
  );

  // git stuff
  const denom = hintData?.gitRepoUrl?.lastIndexOf(':');
  const gitUrl = hintData?.gitRepoUrl?.slice(0, denom);
  const gitFile = hintData?.gitRepoUrl?.slice((denom ?? 0) + 1);

  const prevDeployHashQuery = useGetPreviousGitInfoQuery(
    props.safe,
    hintData?.gitRepoUrl ?? ''
  );

  let prevDeployGitHash: string;
  if (props.allowPublishing) {
    prevDeployGitHash =
      (hintData?.prevGitRepoHash || hintData?.gitRepoHash) ?? '';
  } else {
    prevDeployGitHash =
      prevDeployHashQuery.data &&
      prevDeployHashQuery.data[0].result &&
      ((prevDeployHashQuery.data[0].result as any).length as number) > 2
        ? ((prevDeployHashQuery.data[0].result as any).slice(2) as any)
        : hintData?.gitRepoHash;
  }

  const cannonDefInfo = useLoadCannonDefinition(
    gitUrl ?? '',
    hintData?.gitRepoHash ?? '',
    gitFile ?? ''
  );

  const { patches } = useGitDiff(
    gitUrl ?? '',
    prevDeployGitHash,
    hintData?.gitRepoHash ?? '',
    cannonDefInfo.filesList ? Array.from(cannonDefInfo.filesList) : []
  );

  const parseDiffFileNames = (diffString: string): string[] => {
    const regExp = /[-|+]{3}\s[ab]\/\.(.*?)\n/g;
    let match;
    const fileNames: string[] = [];
    while ((match = regExp.exec(diffString)) !== null) {
      fileNames.push(match[1]);
    }
    return fileNames;
  };

  if (hintData?.cannonPackage && !cannonInfo.contracts) {
    return (
      <Box
        py="20"
        alignItems="center"
        justifyContent="center"
        textAlign="center"
      >
        <CustomSpinner mx="auto" mb="2" />
        <Text fontSize="sm" color="gray.400">
          Parsing transaction data...
        </Text>
      </Box>
    );
  }

  if (!hintData) {
    return <Alert status="info">Could not parse the transaction.</Alert>;
  }

  return (
    <Box>
      {props.allowPublishing && (
        <>
          <ChakraAlert
            bg="gray.800"
            border="1px solid"
            borderColor="gray.700"
            mb={8}
          >
            <GitHub strokeWidth={1.5} />
            <Box ml={2.5}>
              <AlertTitle lineHeight={1} fontSize="sm" mb={1.5}>
                GitOps Deployment
              </AlertTitle>
              <AlertDescription display="block" lineHeight={1} fontSize="sm">
                These transactions were generated by{' '}
                <Link onClick={onOpen}>
                  modifying {Array.from(cannonDefInfo?.filesList || [])?.length}{' '}
                  cannonfiles
                </Link>{' '}
                in{' '}
                <Link isExternal href={gitUrl}>
                  this repository
                </Link>
                .
              </AlertDescription>
            </Box>
          </ChakraAlert>

          <Modal size="full" isOpen={isOpen} onClose={onClose}>
            <ModalOverlay />
            <ModalContent background="gray.900">
              <ModalCloseButton />
              <ModalBody>
                <Flex>
                  <Box w="50%" px={2} py={1} fontWeight="semibold">
                    {prevDeployGitHash}
                  </Box>
                  <Box w="50%" px={2} py={1} fontWeight="semibold">
                    {hintData?.gitRepoHash}
                  </Box>
                </Flex>
                {patches.map((p) => {
                  if (!p) {
                    return [];
                  }

                  try {
                    const { oldRevision, newRevision, type, hunks } =
                      parseDiff(p)[0];
                    return (
                      <Box
                        bg="gray.900"
                        borderRadius="sm"
                        overflow="hidden"
                        fontSize="xs"
                        mb={2}
                      >
                        <Flex
                          bg="blackAlpha.300"
                          direction="row"
                          py="1"
                          fontWeight="semibold"
                        >
                          <Box w="50%" px={2} py={1}>
                            {parseDiffFileNames(p)[0]}
                          </Box>
                          <Box w="50%" px={2} py={1}>
                            {parseDiffFileNames(p)[1]}
                          </Box>
                        </Flex>
                        <Diff
                          key={oldRevision + '-' + newRevision}
                          viewType="split"
                          diffType={type}
                          hunks={hunks}
                        />
                      </Box>
                    );
                  } catch (err) {
                    console.debug('diff didnt work:', err);

                    return [];
                  }
                })}
              </ModalBody>
            </ModalContent>
          </Modal>
        </>
      )}

      <Box maxW="100%" overflowX="scroll">
        {hintData.txns.map((txn, i) => (
          <Box key={`tx-${i}`} mb={8}>
            <DisplayedTransaction
              contracts={cannonInfo.contracts as any}
              txn={txn}
            />
          </Box>
        ))}
      </Box>
    </Box>
  );
}
