import { ethers } from 'ethers';

import { ChainBuilderRuntimeInfo } from '.';

import { ARACHNID_CREATE2_PROXY } from './constants';
import { keccak256 } from 'ethers/lib/utils';

import Debug from 'debug';

const debug = Debug('cannon:builder:create2');

export const ARACHNID_DEPLOY_ADDR = '0x3fab184622dc19b6109349b94811493bf2a45362';

export const ARACHNID_DEPLOY_TXN =
  '0xf8a58085174876e800830186a08080b853604580600e600039806000f350fe7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe03601600081602082378035828234f58015156039578182fd5b8082525050506014600cf31ba02222222222222222222222222222222222222222222222222222222222222222a02222222222222222222222222222222222222222222222222222222222222222';

/**
 * If arachnid create2 proxy is not already deployed, this function can deploy it.
 * @param runtime the runtime which can be used to deploy
 */
export async function ensureArachnidCreate2Exists(runtime: ChainBuilderRuntimeInfo) {
  // if arachnid create2 contract is not deployed
  if ((await runtime.provider.getCode(ARACHNID_CREATE2_PROXY)) === '0x') {
    debug('arachnid create2 contract not found. attempting to deploy...');
    // on local testnets the arachnid contract is not deployed,
    // but we can deploy it easily

    // first "get" the signer (which will populate it for use and with enough eth for gas)
    // if signer doesn't exist then this isnt local testing network, and this txn will fail
    try {
      await runtime.getSigner(ARACHNID_DEPLOY_ADDR);
    } catch (err) {
      debug('got arachnid signer error', err);
      throw new Error(
        'could not populate arachnid signer address. ' +
          'This most likely means you are trying to deploy to a non-local network, but the arachnid create2 contract has not been deployed. ' +
          'Please follow the instructions to deploy arachnid create2.'
      );
    }

    // now run the presigned deployment txn
    const txn = await runtime.provider.sendTransaction(ARACHNID_DEPLOY_TXN);

    await txn.wait();
  }
}

/**
 * Returns the address generated by a CREATE2 call using the arachnid proxy
 */
export function makeArachnidCreate2Txn(
  salt: string,
  initcode: ethers.utils.BytesLike,
  arachnidAddress = ARACHNID_CREATE2_PROXY
): [ethers.providers.TransactionRequest, string] {
  let saltHash = salt;
  if (!ethers.utils.isBytesLike(salt) || salt.length != 66) {
    saltHash = keccak256(ethers.utils.toUtf8Bytes(salt));
  }

  const txn = {
    to: arachnidAddress,
    data: saltHash + initcode.toString().slice(2),
  };

  const contractAddress =
    '0x' +
    ethers.utils
      .keccak256('0xff' + arachnidAddress.slice(2) + saltHash.slice(2) + ethers.utils.keccak256(initcode).slice(2))
      .slice(26);

  // ethers.getAddress will uppercase the address properly for checksum purposes
  return [txn, ethers.utils.getAddress(contractAddress)];
}
