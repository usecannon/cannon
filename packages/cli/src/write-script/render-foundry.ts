import { EOL } from 'node:os';
import { Transform } from 'node:stream';

import { getAddress } from 'viem';

/**
 * This script is used to deploy contracts using Foundry Cast.
 * It outputs a bash script that can be used to deploy contracts and execute transactions.
 * Note: Make sure you add `.sh` extension to the output file.
 */

const header = `
// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {Script} from "forge-std/Script.sol";

/**
 * @notice The following script is automatically generated by https://usecannon.com
 */
contract CannonDeploy is Script {
    mapping(bytes32 => address) public getAddress;

    function run() external {
        bytes memory data;
`;

const footer = `
    }
}
`;

export const createRenderer = () =>
  new Transform({
    objectMode: true,
    construct(cb) {
      this.push(header); // Bash script header
      return cb();
    },
    transform(line, _, cb) {
      const title = `[${line.type}.${line.label}]`;
      const indent = '    '.repeat(2);

      this.push(`${indent}// ${title}${EOL}`);
      if (!line.result) {
        // Logging non-transaction steps
        this.push(`${indent}// no on-chain transactions required`);
      } else {
        // Loggin txn types
        for (const c in line.result.contracts) {
          this.push(`${indent}// > CONTRACT DEPLOYED: ${line.result.contracts[c].address}\n`);
          this.push(`${indent}getAddress[keccak256("${c}")] = address(${getAddress(line.result.contracts[c].address)});\n`);
        }

        for (const t in line.result.txns) {
          this.push(`${indent}// > TRANSACTION EXECUTED: ${Object.keys(line.result.txns[t].events).join(', ')}\n`);
        }
      }

      for (const { to, from, input, value } of line.txns) {
        if (from) {
          this.push(`${indent}vm.broadcast(${getAddress(from)});\n`);
          this.push(`${indent}data = hex"${input.slice(2)}";\n`);
        }

        this.push('assembly {\n');
        if (!to) {
          this.push(`${indent}    pop(create(0, add(data, 0x20), ${input.length / 2 - 1}))\n`);
        } else {
          this.push(`${indent}    pop(call(gas(), ${to}, ${value}, add(data, 0x20), ${input.length / 2 - 1}, 0, 0))\n`);
        }

        this.push('}\n');
        // Log the title and command
        //const indent = '  '.repeat(line.depth);
        //this.push(`${indent}echo "Executing: ${title}"${EOL}`);
        //this.push(`${indent}${command}${EOL}${EOL}`);
      }

      return cb();
    },
    flush(cb) {
      this.push(footer); // Bash script footer
      return cb();
    },
  });
