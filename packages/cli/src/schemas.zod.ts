import { z } from 'zod';
import { CliSettings } from './settings';
import { DEFAULT_CANNON_DIRECTORY, DEFAULT_REGISTRY_ADDRESS, DEFAULT_REGISTRY_PROVIDER_URL } from './constants';

/// ================================ INPUT CONFIG SCHEMAS ================================ \\\

// Different regular expressions used to validate formats like
// general string interpolation, step names, contract artifacts and packages
const stepRegex = RegExp(/^[\w-]+\.[\w-]+$/, 'i');

export const runSchema = z
  .object({
    /** The javascript (or typescript) file to load  */
    exec: z.string().describe('The javascript (or typescript) file to load'),
    /** The function to call in this file  */
    func: z.string().describe('The function to call in this file'),
    /**
     * An array of files and directories that this script depends on.
     * The cache of the cannonfile's build is recreated when these files change.
     */
    modified: z
      .array(z.string())
      .nonempty()
      .describe(
        "An array of files and directories that this script depends on. The cache of the cannonfile's build is recreated when these files change."
      ),
    /**
     * The artifacts that are generated by this script. Should be in the format (example): `contracts.FooBar`
     */
    outputs: z
      .array(z.string())
      .describe('The artifacts that are generated by this script. Should be in the format (example): `contracts.FooBar`'),
  })
  .merge(
    z
      .object({
        /** Arguments passed to the function (after the ChainBuilder object) */
        args: z.array(z.string()).describe('Arguments passed to the function (after the ChainBuilder object)'),
        /** Environment variables to be set on the script */
        env: z.array(z.string()).describe('Environment variables to be set on the script'),
        /** List of steps that this action depends on */
        depends: z
          .array(
            z.string().refine(
              (val) => Boolean(val.match(stepRegex)),
              (val) => ({
                message: `Bad format for "${val}". Must reference a previous step, example: 'contract.Storage'`,
              })
            )
          )
          .describe('List of steps that this action depends on'),
      })
      .partial()
  );

/// ================================ ENVIRONMENT VARIABLES SCHEMA ================================ \\\

/**
 * Environment variables that are used by the CLI
 */

export const cannonSettingsSchema = (fileSettings: Omit<CliSettings, 'cannonDirectory'>) => ({
  CANNON_DIRECTORY: z.string().default(DEFAULT_CANNON_DIRECTORY),
  CANNON_SETTINGS: z.string().optional(),
  CANNON_PROVIDER_URL: z.string().default(fileSettings.providerUrl || 'frame,direct'),
  CANNON_PRIVATE_KEY: z
    .string()
    .length(64)
    .optional()
    .default(fileSettings.privateKey as string),
  CANNON_IPFS_URL: z
    .string()
    .url()
    .optional()
    .default(fileSettings.ipfsUrl as string),
  CANNON_PUBLISH_IPFS_URL: z
    .string()
    .url()
    .optional()
    .default(fileSettings.publishIpfsUrl as string),
  CANNON_REGISTRY_PROVIDER_URL: z
    .string()
    .default(fileSettings.registryProviderUrl || `frame,${DEFAULT_REGISTRY_PROVIDER_URL}`),
  CANNON_REGISTRY_CHAIN_ID: z.string().default(fileSettings.registryChainId || '1'),
  CANNON_REGISTRY_ADDRESS: z
    .string()
    .startsWith('0x')
    .length(42)
    .default(fileSettings.registryAddress || DEFAULT_REGISTRY_ADDRESS),
  CANNON_REGISTRY_PRIORITY: z.enum(['onchain', 'local']).default(fileSettings.registryPriority || 'onchain'),
  CANNON_ETHERSCAN_API_URL: z.string().url().optional().default(fileSettings.etherscanApiUrl),
  CANNON_ETHERSCAN_API_KEY: z.string().length(34).optional().default(fileSettings.etherscanApiKey),
  CANNON_QUIET: z.boolean().default(fileSettings.quiet || false),
  TRACE: z.boolean().default(false),
});
